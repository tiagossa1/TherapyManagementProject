// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TherapyAPI.Context;

namespace TherapyAPI.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20210811005038_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("TherapyAPI.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppointmentTypeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TherapistId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("TherapistId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("TherapyAPI.Models.AppointmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AppointmentType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e4df1887-b1ad-4bef-a50d-1287b558fcaf"),
                            Name = "Flowers"
                        },
                        new
                        {
                            Id = new Guid("a4a7d053-1e39-485a-8c42-08a48e07a08d"),
                            Name = "Acupuncture"
                        },
                        new
                        {
                            Id = new Guid("5e7ba4ba-0440-4eac-9653-1cc17eae8c33"),
                            Name = "Chromotherapy"
                        },
                        new
                        {
                            Id = new Guid("dbb2dd20-f080-43e4-a28d-9dad56b04271"),
                            Name = "Massage"
                        },
                        new
                        {
                            Id = new Guid("512de3b6-596c-4415-bf3e-e4b09edb2aca"),
                            Name = "Flower Therapy"
                        },
                        new
                        {
                            Id = new Guid("226272a6-b282-4f74-9779-6db3803007d7"),
                            Name = "Phytotherapy"
                        },
                        new
                        {
                            Id = new Guid("b83a9c6f-633c-47de-b340-80872f7c2bba"),
                            Name = "Reflexology"
                        },
                        new
                        {
                            Id = new Guid("5edd2d71-6b51-4fd0-bbcf-e09adbf295b3"),
                            Name = "Shiatsu"
                        },
                        new
                        {
                            Id = new Guid("e4140197-ad6a-485a-bb57-4977f042e8cb"),
                            Name = "Reiki"
                        });
                });

            modelBuilder.Entity("TherapyAPI.Models.Billing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Discounted")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("OriginalPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Billings");
                });

            modelBuilder.Entity("TherapyAPI.Models.CivilStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CivilStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d3aa6a1-4b0e-4482-81a5-58b35b5fce79"),
                            Name = "Married"
                        },
                        new
                        {
                            Id = new Guid("19d4fe96-4820-4d9a-bbde-fd52b0c1f4ca"),
                            Name = "Divorced"
                        },
                        new
                        {
                            Id = new Guid("250b0350-1f54-4fa8-ba2f-f0f2148fe611"),
                            Name = "Single"
                        });
                });

            modelBuilder.Entity("TherapyAPI.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CivilStatusId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("TEXT");

                    b.Property<string>("NIF")
                        .HasMaxLength(9)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Observations")
                        .HasColumnType("TEXT");

                    b.Property<string>("Occupation")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CivilStatusId");

                    b.HasIndex("GenderId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("TherapyAPI.Models.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("198a5334-eedb-4a44-85bd-e8f2165ee281"),
                            Name = "Male"
                        },
                        new
                        {
                            Id = new Guid("8f52e711-6ee7-4937-86f1-fbd9609f14d2"),
                            Name = "Female"
                        });
                });

            modelBuilder.Entity("TherapyAPI.Models.Therapist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("Therapists");
                });

            modelBuilder.Entity("TherapyAPI.Models.Appointment", b =>
                {
                    b.HasOne("TherapyAPI.Models.AppointmentType", "AppointmentType")
                        .WithMany()
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TherapyAPI.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TherapyAPI.Models.Therapist", "Therapist")
                        .WithMany()
                        .HasForeignKey("TherapistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentType");

                    b.Navigation("Client");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("TherapyAPI.Models.Billing", b =>
                {
                    b.HasOne("TherapyAPI.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("TherapyAPI.Models.Client", b =>
                {
                    b.HasOne("TherapyAPI.Models.CivilStatus", "CivilStatus")
                        .WithMany()
                        .HasForeignKey("CivilStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TherapyAPI.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CivilStatus");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("TherapyAPI.Models.Therapist", b =>
                {
                    b.HasOne("TherapyAPI.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });
#pragma warning restore 612, 618
        }
    }
}
