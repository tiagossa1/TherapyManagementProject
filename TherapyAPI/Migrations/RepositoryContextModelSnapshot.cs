// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TherapyAPI.Entities;

namespace TherapyAPI.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034");

            modelBuilder.Entity("TherapyAPI.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AppointmentDate");

                    b.Property<TimeSpan>("AppointmentTime");

                    b.Property<Guid>("AppointmentTypeId");

                    b.Property<Guid>("ClientId");

                    b.Property<Guid>("TherapistId");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("TherapistId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("TherapyAPI.Models.AppointmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("AppointmentType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba1a5585-f976-4016-af8b-000ebfede7bb"),
                            Code = "FLORAIS",
                            Name = "Florais"
                        },
                        new
                        {
                            Id = new Guid("601d8a79-759d-4227-af7c-93165ef10bc5"),
                            Code = "ACUPUNTURA",
                            Name = "Acupuntura"
                        },
                        new
                        {
                            Id = new Guid("ba8629cb-0c4d-4143-9380-04387883a6e3"),
                            Code = "CROMOTERAPIA",
                            Name = "Cromoterapia"
                        },
                        new
                        {
                            Id = new Guid("6b0a9cf8-3ada-4b5b-b66b-c042ecbde5c2"),
                            Code = "MASSAGEM",
                            Name = "Massagem"
                        },
                        new
                        {
                            Id = new Guid("dd2d567b-0fba-4164-9cd4-d8399763e82c"),
                            Code = "TERAPIACOMFLORES",
                            Name = "Terapia Com Flores"
                        },
                        new
                        {
                            Id = new Guid("7fac5816-5eb6-4eb2-990d-62f55ac2f9ae"),
                            Code = "FITOTERAPIA",
                            Name = "Fitoterapia"
                        },
                        new
                        {
                            Id = new Guid("189097c1-65e3-4079-bc78-45df0e219fb9"),
                            Code = "REFLEXOLOGIA",
                            Name = "Reflexologia"
                        },
                        new
                        {
                            Id = new Guid("e25193ca-760c-49d5-8b4e-0c71d90c2fdc"),
                            Code = "SHIATSU",
                            Name = "Shiatsu"
                        },
                        new
                        {
                            Id = new Guid("4a002c74-7f63-48bf-9883-4a6d78b353ef"),
                            Code = "REIKI",
                            Name = "Reiki"
                        });
                });

            modelBuilder.Entity("TherapyAPI.Models.Billing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AppointmentId");

                    b.Property<bool>("Discount");

                    b.Property<decimal>("Price");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Billings");
                });

            modelBuilder.Entity("TherapyAPI.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<char>("CivilStatus");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<char>("Gender");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(9);

                    b.Property<string>("NIF")
                        .HasMaxLength(9);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Observations");

                    b.Property<string>("Occupation");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("TherapyAPI.Models.Therapist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<char>("Gender");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(9);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Therapists");
                });

            modelBuilder.Entity("TherapyAPI.Models.Appointment", b =>
                {
                    b.HasOne("TherapyAPI.Models.AppointmentType", "AppointmentType")
                        .WithMany()
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TherapyAPI.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TherapyAPI.Models.Therapist", "Therapist")
                        .WithMany()
                        .HasForeignKey("TherapistId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TherapyAPI.Models.Billing", b =>
                {
                    b.HasOne("TherapyAPI.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
